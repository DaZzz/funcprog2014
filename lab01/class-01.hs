-- IT314. Функциональное программирование
-- Занятие 1

-- 1) Функция без параметров (= константа)

hello :: String -- типовая аннотация (сигнатура)
hello = "Hello, world"

{-
  Запустите интерпретатор ghci (из каталога, в котором находится этот файл),
  загрузите этот файл:

> :load class-01

  и вызовите функцию hello:

> hello

-}

-- 2) Объявление функций

-- тип функции: Два параметра типа Double и результат того же типа
avg :: Double -> Double -> Double
avg a b = (a + b)/2

{-

  Пример вызова (передача параметров через пробел,
  пробел -- это операция вызова функции (применение)!):

> avg 5 9
7.0

  Функция может вызываться инфиксно:

> 5 `avg` 9
7.0

  а) Вычислите в ghci среднее арифметическое следующих пар чисел: 332 и 723, 34.34 и 93.27.
     Впишите ответы: 527.5, 63.805

  б) Напишите функцию avg3, вычисляющую среднее арифметическое трёх заданных чисел.
     Проверьте результаты её работы на двух тройках чисел.

-}

avg3 :: Double -> Double -> Double -> Double
avg3 a b c = (a + b + c) / 3

{-
   Результаты проверки:
> avg3 2 3 4
3.0

> avg3 12 234 546
264.0


-}

-- 3) Выражения

{-
   Вычислите и сохраните в этом файле значения следующих выражений,
   обращая внимание на обозначения и приоритеты операций, стандартные функции,
   расстановку скобок:

> 2 + 3
5
> mod 10 4
2
> 10 `mod` 4
2
> True && 5 < 10
True
> 5 < 7 || 10 > 3
True
> sqrt (-2)
NaN
> sqrt (sqrt 16)
2.0
> let x = 4 in (sin x)^2 + (cos x)^2
1.0
> x
<interactive>:22:1: Not in scope: `x'
> 7^(-1)
*** Exception: Negative exponent
> error "AAAA!!!!"
*** Exception: AAAA!!!!
> 12345^54321
[1]    61923 bus error  ghci
> 2 < 3 || 9999954321^99912345 > 12345^54321
True

-}

-- 4) Типы

{-
  Тип выражения можно узнать, воспользовавшись командой интерпретатора :t, например:

> :t 'a'
'a' :: Char
> :t 1
1 :: Num a => a

  Запись "1 :: Num a => a" означает, что выражение "1" имеет тип "a", где "a" принадлежит
  классу типов "Num" (имеет экземпляр класса типов "Num" или просто является числом).

  Определите и сохраните в этом файле типы следующих выражений:
    5 :: Num a => a
    5.0 :: Fractional a => a
    sqrt 4 :: Floating a => a
    sqrt 4.0 :: Floating a => a
    2+3 :: Num a => a
    5 < 7 :: Bool
    if 2 > 3 then 7 else 5 :: Num a => a

   Команда ":set +t" включает режим, при котором печатается тип каждого вычисляемого выражения.
   Команда ":set +s" включает режим, при котором печатается время вычисления каждого выражения.

-}

-- 5) Объявление функций (2)

-- а) Утроение значения заданного числа
-- (объясните смысл типовой аннотации: ???)
triple :: Num a => a -> a
triple a = 3 * a

-- б) Вычисление удвоения числа
--    Типовую аннотацию и образцы параметров следует написать самостоятельно
double :: Num a => a -> a
double a = a + a

-- в) Определение наибольшего из трёх заданных целых чисел (напишите типовую аннотацию).
max3 :: Ord a => a -> a -> a -> a
max3 a b c = max (max a b) c

-- г) Функция, возвращающая True тогда и только тогда, когда оба ее аргумента равны True
-- (пользоваться стандартными логическими операциями не следует, обратите внимание на
--  образцы параметров функции, последняя строка -- "во всех остальных случаях").
bothTrue :: Bool -> Bool -> Bool
bothTrue True True = True
bothTrue _  _ = False


-- д) Функция, возвращающая True, если только один из её аргументов равен True,
-- и False в противном случае (пользоваться стандартными логическими операциями не следует).
oneTrue :: Bool -> Bool -> Bool
oneTrue False False = False
oneTrue True True = False
oneTrue _ _ = True

-- е) Дана температура в градусах Фаренгейта. Вычислить соответствующую температуру
-- в градусах Цельсия.
f2c :: Double -> Double
f2c t = (t - 32) * 5/9

{-
   ж) Найти наибольший общий делитель двух целых чисел, пользуясь
      алгоритмом Евклида (псевдокод):
      НОД(a, b) = НОД(b, a mod b), если b ≠ 0; 
      НОД(a, 0) = a.
-}
gcd' :: Integral a => a -> a -> a
gcd' a 0 = a
gcd' a b = gcd b (a `mod` b)

-- з) Функция, возвращающая название дня недели по его номеру (от 1 до 7),
--    если номер неправильный, генерируется исключение (функция error).
dayOfWeek :: Int -> String
dayOfWeek 1 = "понедельник"
dayOfWeek 2 = "вторник"
dayOfWeek 3 = "среда"
dayOfWeek 4 = "четверг"
dayOfWeek 5 = "пятница"
dayOfWeek 6 = "суббота"
dayOfWeek 7 = "воскресенье"
dayOfWeek _ = error "AAA!!!"


-- Далее типовые аннотации, если их нет, следует писать самостоятельно.

-- 6) Условное определение функции

-- Пример.
-- Определение знака числа (-1, 0, 1). Класс типов Ord определяет операции сравнения.
sign :: (Num a, Ord a) => a -> Int
sign a
   | a < 0 = -1
   | a == 0 = 0
   | otherwise = 1

{-
   а) Найти значение функции f(x), вычисляемое по правилу:
          −x,   если x ≤ 0,
	  x^2,  если 0 < x < 2,
          4,    если x ≥ 2.
-}

eval_f :: Double -> Double
eval_f x
  | x <= 0 = -x
  | x >= 2 = 4
  | otherwise = x^2

-- б) Напишите функцию, возвращающую текстовую характеристику ("жарко",
--    "тепло", "прохладно", "холодно") по заданному значению температуры в градусах Цельсия.
describeTemperature :: Double -> String
describeTemperature t
  | t < 0 = "холодно"
  | t < 10 = "прохладно"
  | t < 25 = "тепло"
  | otherwise = "жарко"

{- 
   в) (*) Дан список температур в градусах Фаренгейта. Вывести для каждого значения
    соответствующую текстовую характеристику.

  Решение:
> map (describeTemperature . f2c) [82, 94, 50, 65, 34]

  В этом решении с помощью операции (.) строится композиция (суперпозиция) функций,
  и получившаяся функция применяется функцией map к каждому элементу списка.
-}

-- 7) Рекурсия

-- Пример. Вычислить сумму всех целых чисел от 1 до n (где n >= 1):
sum_n :: Int -> Int
sum_n 1 = 1
sum_n n
  | n > 1 = n + sum_n (n-1)
  | otherwise = error "n should be >= 1"

-- а) Вычислить сумму всех целых чисел от a до b включительно.
sum_ab :: Int -> Int -> Int
sum_ab a b
  | a == b = a
  | otherwise = a + (sum_ab (a + 1) b)

{-
   б) Числовая последовательность определяется следующим образом:
      a1 = 1, a2 = 2, a3 = 3, a_k = a_{k−1} + a_{k−2} − 2*a_{k−3}, k = 4, 5, ...
      Вычислить её n-й элемент.
-}
eval_a_n :: Int -> Int
eval_a_n 1 = 1
eval_a_n 2 = 2
eval_a_n 3 = 3
eval_a_n n = eval_a_n (n - 1) + eval_a_n (n - 2) + 2 * eval_a_n (n - 3)

-- в) Вычислить, пользуясь рекурсией, n-ю степень числа a (n - целое):
pow :: Double -> Int -> Double
pow a 0 = 1
pow a n = a * pow a (n - 1)

-- г) Пользуясь ранее написанной функцией pow, вычислить сумму: 1^k + 2^k + ... + n^k.
sum_nk :: Double -> Int -> Double
sum_nk 1 k = 1
sum_nk n k = (pow n k) + sum_nk (n - 1) k

-- д) Сумма факториалов чисел от 1 до n.
sum_fact :: Int -> Int
sum_fact 1 = 1
sum_fact n = fact n + sum_fact (n - 1)
  where
    fact 0 = 1
    fact n = fact (n - 1) * n

-- е) Количество цифр целого числа
number_digits :: Int -> Int
number_digits n
  | n < 10 = 1
  | otherwise = 1 + number_digits (n `div` 10)

-- ж) Проверить, является ли заданное число простым?
isPrime n = isPrime' n (intSqrt n)
  where 
    isPrime' n 1 = True
    isPrime' n d = n `mod` d /= 0 && isPrime' n (d - 1)
    intSqrt = floor . sqrt . fromIntegral


-- 8) Разное

{-
   а) Дан номер года (положительное целое число). Определить количество дней в этом году,
  учитывая, что обычный год насчитывает 365 дней, а високосный — 366 дней. Високосным
  считается год, делящийся на 4, за исключением тех годов, которые делятся на 100 и
  не делятся на 400 (например, годы 300, 1300 и 1900 не являются високосными,
  а 1200 и 2000 — являются).
-}

nDays year = if isLeap year then 365 else 366 
  where
    isLeap y = 
      y `mod` 4 == 0 && (y `mod` 100 /= 0 || y `mod` 400 == 0)
